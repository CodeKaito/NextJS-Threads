"use strict";
exports.__esModule = true;
exports.formatThreadCount = exports.formatDateString = exports.isBase64Image = exports.cn = void 0;
var clsx_1 = require("clsx");
var tailwind_merge_1 = require("tailwind-merge");
// generated by shadcn
function cn() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    return tailwind_merge_1.twMerge(clsx_1.clsx(inputs));
}
exports.cn = cn;
// created by chatgpt
function isBase64Image(imageData) {
    var base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
    return base64Regex.test(imageData);
}
exports.isBase64Image = isBase64Image;
// created by chatgpt
function formatDateString(dateString) {
    var options = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    var date = new Date(dateString);
    var formattedDate = date.toLocaleDateString(undefined, options);
    var time = date.toLocaleTimeString([], {
        hour: "numeric",
        minute: "2-digit"
    });
    return time + " - " + formattedDate;
}
exports.formatDateString = formatDateString;
// created by chatgpt
function formatThreadCount(count) {
    if (count === 0) {
        return "No Threads";
    }
    else {
        var threadCount = count.toString().padStart(2, "0");
        var threadWord = count === 1 ? "Thread" : "Threads";
        return threadCount + " " + threadWord;
    }
}
exports.formatThreadCount = formatThreadCount;
